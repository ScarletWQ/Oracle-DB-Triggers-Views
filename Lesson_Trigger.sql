-------Create Tables and Indexes:
CREATE TABLE LESSON (
    LESSONID NUMBER, 
    COURSEID NUMBER, 
    VENUE VARCHAR2(50), 
    DURATION NUMBER, 
    LESSON_STARTTIME VARCHAR2(10)
);

CREATE TABLE LESSON_DAYOFWEEK (
    LESSONID NUMBER, 
    DAYOFWEEKID NUMBER, 
    STARTTIME TIMESTAMP (6), 
    ENDTIME TIMESTAMP (6)
);

CREATE TABLE DAYOFWEEK (
    DAYOFWEEKID NUMBER, 
    DAYOFWEEK NUMBER
);

CREATE UNIQUE INDEX LESSON_VIEW_PK ON LESSON (LESSONID);

CREATE UNIQUE INDEX DAYOFWEEKVALUES_PK ON DAYOFWEEK (DAYOFWEEKID);

ALTER TABLE LESSON ADD CONSTRAINT LESSON_VIEW_PK PRIMARY KEY (LESSONID) USING INDEX ENABLE;

ALTER TABLE DAYOFWEEK ADD CONSTRAINT DAYOFWEEKVALUES_PK PRIMARY KEY (DAYOFWEEKID) USING INDEX ENABLE;

ALTER TABLE LESSON ADD CONSTRAINT LESSON_VIEW_FK FOREIGN KEY (COURSEID) REFERENCES COURSE (COURSEID) ENABLE;

ALTER TABLE LESSON_DAYOFWEEK ADD CONSTRAINT LESSON_FK FOREIGN KEY (LESSONID) REFERENCES LESSON (LESSONID) ENABLE;

ALTER TABLE LESSON_DAYOFWEEK ADD CONSTRAINT DAYOFWEEK_FK FOREIGN KEY (DAYOFWEEKID) REFERENCES DAYOFWEEK (DAYOFWEEKID) ENABLE;

--insert Data into lesson:

INSERT INTO lesson
	(lessonid, courseid, venue, duration, lesson_starttime)
	SELECT    lessonid, courseid, venue, duration, starttime
FROM lesson1;


--create sequence
CREATE SEQUENCE DAYOFWEEK_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE LESSON_DAYOFWEEK_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


CREATE SEQUENCE LESSON_SEQ
START WITH 150
INCREMENT BY 1
NOCACHE
NOCYCLE;


--create procedure to copy the data
CREATE OR REPLACE PROCEDURE maketables IS
  CURSOR c_lesson IS
    SELECT lessonid, courseid, venue, duration, starttime, dayofweek FROM lesson1;
  v_lesson c_lesson%ROWTYPE;
BEGIN
  OPEN c_lesson;

  LOOP
    FETCH c_lesson INTO v_lesson;
    EXIT WHEN c_lesson%NOTFOUND;

    INSERT INTO dayofweek (dayofweekid, dayofweek)
    VALUES (DAYOFWEEK_seq.NEXTVAL, v_lesson.dayofweek);

    INSERT INTO lesson_dayofweek (lessonid, dayofweekid, starttime, endtime)
    VALUES (v_lesson.lessonid, DAYOFWEEK_seq.currVAL, TO_DATE('01-JAN-2023', 'DD-MON-YYYY'), NULL);
  END LOOP;

  CLOSE c_lesson;
  COMMIT;
END;

--run procedure
BEGIN
    maketables;
END;
/
---------------------------------------
CREATE  VIEW LESSON_DAYOFWEEK_VIEW AS
SELECT  M.LESSONID, M.DAYOFWEEKID, M.STARTTIME, M.ENDTIME, 
        L.COURSEID, L.VENUE, L.DURATION, L.LESSON_STARTTIME,
        R.DAYOFWEEK
FROM LESSON_DAYOFWEEK M
LEFT JOIN LESSON L ON L.LESSONID=M.LESSONID
LEFT JOIN DAYOFWEEK R ON R.DAYOFWEEKID=M.DAYOFWEEKID
WHERE 
    M.endtime IS NULL;


CREATE OR REPLACE TRIGGER LESSON_DAYOFWEEK_VIEW_DELETE_TRIGGER
INSTEAD OF DELETE ON LESSON_DAYOFWEEK_VIEW
FOR EACH ROW
DECLARE
        CURSOR C_DAYOFWEEK IS
            SELECT LESSONID, DAYOFWEEKID FROM LESSON_DAYOFWEEK
            WHERE LESSONID=:OLD.LESSONID;
        V_DAYOFWEEK C_DAYOFWEEK%ROWTYPE;
BEGIN
    OPEN C_DAYOFWEEK;
    
    LOOP 
    FETCH C_DAYOFWEEK INTO V_DAYOFWEEK;
    EXIT WHEN C_DAYOFWEEK%NOTFOUND;
    
    DELETE FROM LESSON_DAYOFWEEK
        WHERE DAYOFWEEKID=V_DAYOFWEEK.DAYOFWEEKID AND LESSONID=:OLD.LESSONID;
        
    DELETE FROM DAYOFWEEK
        WHERE DAYOFWEEKID=V_DAYOFWEEK.DAYOFWEEKID;
    END LOOP;

    DELETE FROM LESSON 
        WHERE LESSONID=:OLD.LESSONID;
END;


create or replace TRIGGER LESSON_DAYOFWEEK_VIEW_INSERT_TRIGGER
INSTEAD OF INSERT ON LESSON_DAYOFWEEK_VIEW
FOR EACH ROW

BEGIN
    INSERT INTO LESSON (LESSONID, COURSEID, VENUE, DURATION, LESSON_STARTTIME) VALUES
    (LESSON_SEQ.nextval, :NEW.COURSEID, :NEW.VENUE, :NEW.DURATION, :NEW.LESSON_STARTTIME);
    
    INSERT INTO DAYOFWEEK (DAYOFWEEKID, DAYOFWEEK) VALUES
    (DAYOFWEEK_SEQ.NEXTVAL, :NEW.DAYOFWEEK);
    
    INSERT INTO LESSON_DAYOFWEEK(LESSONID, DAYOFWEEKID, STARTTIME, ENDTIME) VALUES
    (LESSON_SEQ.currval, DAYOFWEEK_SEQ.CURRVAL, CURRENT_TIMESTAMP, NULL);
END;


CREATE OR REPLACE TRIGGER LESSON_DAYOFWEEK_VIEW_UPDATE_TRIGGER
INSTEAD OF UPDATE ON LESSON_DAYOFWEEK_VIEW
FOR EACH ROW
BEGIN
    IF :NEW.DAYOFWEEK <> :OLD.DAYOFWEEK THEN
        INSERT INTO DAYOFWEEK(DAYOFWEEKID, DAYOFWEEK) VALUES
        (DAYOFWEEK_SEQ.NEXTVAL, :NEW.DAYOFWEEK);
    
        UPDATE LESSON_DAYOFWEEK
            SET ENDTIME=CURRENT_TIMESTAMP
            WHERE LESSONID=:OLD.LESSONID AND DAYOFWEEKID=:OLD.DAYOFWEEKID;
    
        INSERT INTO LESSON_DAYOFWEEK (LESSONID, DAYOFWEEKID, STARTTIME, ENDTIME) VALUES
            (:OLD.LESSONID, DAYOFWEEK_SEQ.CURRVAL, CURRENT_TIMESTAMP, NULL);
    ELSE
        UPDATE LESSON
            SET DURATION=:NEW.DURATION,
                VENUE=:NEW.VENUE,
                LESSON_STARTTIME=LESSON_STARTTIME
            WHERE LESSONID=:NEW.LESSONID;
    END IF;
END;



